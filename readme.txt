ICT Quant Trading System: A Machine Learning Approach to Forex Analysis
This project presents a sophisticated, quantitative trading system that integrates principles from the "Inner Circle Trader" (ICT) methodology with a powerful machine learning ensemble model. 
It is designed to fetch real-time Forex data, identify key market structures and patterns, and generate predictive trading signals. 
The entire system is wrapped in an interactive web application built with Streamlit.

Table of Contents
Key Features
How It Works
Technology Stack
Setup and Installation
Configuration
Usage
Disclaimer
License
Key Features
Robust Data Fetching: Retrieves Forex data primarily from Alpha Vantage with a seamless fallback to Yahoo Finance to ensure data availability.
Multi-Timeframe Analysis: Capable of generating and comparing signals across different timeframes (e.g., 1h, 4h, 1d) for higher-conviction trades.
ICT Concepts Engine: Programmatically identifies core ICT concepts:
Market Structure Shifts: Detects bullish and bearish trends.
Fair Value Gaps (FVG): Pinpoints market imbalances.
Order Blocks (OB): Identifies significant institutional supply and demand zones.
Liquidity Sweeps: Spots raids on previous highs and lows.
Fibonacci Retracement Levels: Calculates key support and resistance levels.
Trading Killzones: Factors in optimal trading session times.
Advanced Feature Engineering: Creates a rich feature set by combining ICT patterns, traditional technical indicators (RSI, MACD, Bollinger Bands, ATR), price action data, and volume analysis.
Sentiment Analysis: Integrates with the X (formerly Twitter) API to fetch and analyze market sentiment for a chosen currency pair.
Economic Calendar: Fetches high-impact news events from the TradingEconomics API to provide fundamental context.
Ensemble Machine Learning Model: Utilizes a powerful ensemble of RandomForestClassifier and GradientBoostingClassifier for robust signal prediction.
Strategy Backtesting: A built-in backtester to evaluate the strategy's performance with customizable parameters like trailing stops and position sizing.
Interactive Dashboard: A user-friendly interface built with Streamlit for data visualization, signal generation, and performance analysis.
How It Works
The system follows a multi-stage pipeline to generate a final trading signal:

Data Collection: The application fetches historical price data for a specified Forex pair. If the primary source (Alpha Vantage) fails or hits a rate limit, it automatically switches to the backup (Yahoo Finance).
Feature Engineering: This is the core of the system. It processes the raw data to generate a wide array of features:
ICT Features: The code scans the data for patterns like Fair Value Gaps, Order Blocks, and changes in Market Structure.
Technical Indicators: Standard indicators like RSI, MACD, and ATR are calculated to measure momentum, trend, and volatility.
Sentiment Score: A sentiment polarity score is calculated from recent tweets related to the asset.
Time-based Features: The model is aware of high-activity trading days (e.g., London/NY session overlap) and low-activity periods.
Model Training: An ensemble model (RandomForest + GradientBoosting) is trained on the engineered features using TimeSeriesSplit to prevent lookahead bias. The model learns to predict the probability of the next candle closing higher than the current one.
Signal Generation:
The trained ML model predicts the probability of an upward or downward move.
A parallel ICT confirmation score is calculated based on the number of bullish vs. bearish ICT patterns present in the latest data.
A final signal (STRONG_BUY, BUY, SELL, STRONG_SELL, HOLD) is generated by combining the ML probability with the ICT confirmation score.
Visualization & Interaction: All data, features, model performance metrics, and the final signal are presented in a clean, interactive Streamlit dashboard.
Technology Stack
Data & Analysis: pandas, numpy, scikit-learn, scipy
Data Sources: requests, yfinance, tweepy
Web Dashboard: streamlit
Charting: plotly, matplotlib, seaborn
NLP: nltk (for VADER sentiment analysis)
Standard Libraries: os, datetime, json, time, logging, warnings
Setup and Installation
Follow these steps to get the project running on your local machine.

1. Clone the Repository

Bash

git clone https://github.com/your-username/ICT-Quant-Trading-System.git
cd ICT-Quant-Trading-System
2. Create and Activate a Virtual Environment
It's highly recommended to use a virtual environment to manage dependencies.

Bash

# For Windows
python -m venv venv
venv\Scripts\activate

# For macOS/Linux
python3 -m venv venv
source venv/bin/activate
3. Install Dependencies
Create a requirements.txt file with the following content:

pandas
numpy
requests
matplotlib
seaborn
scikit-learn
streamlit
plotly
yfinance
tweepy
nltk
scipy
Then, install them using pip:

Bash

pip install -r requirements.txt
4. Download NLTK Data
The application uses the NLTK VADER lexicon for sentiment analysis. The script will attempt to download this automatically, but you can also do it manually by running this Python command:

Python

import nltk
nltk.download('vader_lexicon')
## Configuration

The system requires API keys for data fetching and sentiment analysis. You should store these as environment variables for security.

Create a .env file in the root directory of the project:

ALPHA_VANTAGE_API_KEY="YOUR_ALPHA_VANTAGE_KEY"
TWITTER_API_KEY="YOUR_TWITTER_API_KEY"
TWITTER_API_SECRET="YOUR_TWITTER_API_SECRET"
TWITTER_ACCESS_TOKEN="YOUR_TWITTER_ACCESS_TOKEN"
TWITTER_ACCESS_TOKEN_SECRET="YOUR_TWITTER_ACCESS_TOKEN_SECRET"
TRADINGECONOMICS_API_KEY="YOUR_TRADINGECONOMICS_KEY"
The application will automatically load these variables.

How to get the API Keys:

Alpha Vantage: Get your free API key here
X (Twitter) API: You need a developer account with Elevated access. Apply here
TradingEconomics: Get your API key here
Usage
Once the installation and configuration are complete, you can run the Streamlit application with a single command:

Bash

streamlit run your_script_name.py
Replace your_script_name.py with the actual name of your Python file.

Your web browser should automatically open a new tab with the interactive dashboard. From there, you can select the currency pair, timeframe, and other parameters to begin the analysis.

Disclaimer
This project is for educational and research purposes only. It is not financial advice. The trading signals generated by this system are based on historical data and probabilistic models, which do not guarantee future performance. Trading in financial markets involves a high level of risk, and you should not risk more than you are prepared to lose. The author is not responsible for any financial losses incurred by using this software. Always conduct your own research and consult with a qualified financial advisor before making any investment decisions.

License
This project is licensed under the MIT License. See the LICENSE file for details.
